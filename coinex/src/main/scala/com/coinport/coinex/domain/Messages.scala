/**
 * Copyright (C) 2014 Coinport Inc. <http://www.coinport.com>
 *
 * All classes here are case-classes or case-objects. This is required since we are
 * maintaining an in-memory state that's immutable, so that while snapshot is taken,
 * the in-memory state can still be updated.
 */

package com.coinport.coinex.domain

// ------------------------------------------------------------------------------------------------
// Data
sealed trait AccountOperationError
case object InsuffcientFund extends AccountOperationError
case object InvalidAmount extends AccountOperationError


// ------------------------------------------------------------------------------------------------
// Non-persistent messages
case class AccountOperationOK
case class AccountOperationFailed(error: AccountOperationError)
case class OrderSubmissionOK(order: Order, txs: Seq[Transaction])


// ------------------------------------------------------------------------------------------------
// Persistent Commands - all commands are sent by outside world.
// Please name all commands starting with "Do"

// AccountProcessor commands
case class DoSubmitOrder(order: Order)

case class DoDepositCash(userId: Long, currency: Currency, amount: BigDecimal)
case class DoRequestCashWithdrawal(userId: Long, currency: Currency, amount: BigDecimal)
case class DoConfirmCashWithdrawalSuccess(userId: Long, currency: Currency, amount: BigDecimal)
case class DoConfirmCashWithdrawalFailed(userId: Long, currency: Currency, amount: BigDecimal)

// MarketProcessor commands
case class DoCancelOrder(id: Long)


// ------------------------------------------------------------------------------------------------
// Persistent Events. All events are generated by a certain processor and handeled by another processor.
// For each event, we'll comment it in the form of "origin -> handler".

// AccountProcessor -> MarketProcessor events
case class OrderSubmitted(order: Order)

// MarketProcessor -> AccountProcessor events
case class OrderCancelled(order: Order)
case class TransactionsCreated(txs: Seq[Transaction])
case class NewTxPriceSeen(marketSide: MarketSide, price: Double)