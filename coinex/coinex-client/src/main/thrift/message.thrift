/**
 * Copyright {C} 2014 Coinport Inc. <http://www.coinport.com>
 *
 * WARNING:
 *  All structs must have at least 1 parameters, otherwise AKKA serialization fails.
 */

namespace java com.coinport.coinex.data

include "data.thrift"

///////////////////////////////////////////////////////////////////////
///////////////////////// PROCESSOR MESSAGES //////////////////////////

typedef data.ErrorCode             DErrorCode
typedef data.Currency              DCurrency
typedef data.Order                 DOrder
typedef data.MarketDepth           DMarketDepth
typedef data.UserAccount           DUserAccount
typedef data.UserProfile           DUserProfile
typedef data.AccountTransfer       DAccountTransfer
typedef data.MarketSide            DMarketSide
typedef data.ApiSecret             DApiSecret
typedef data.OrderInfo             DOrderInfo
typedef data.Metrics               DMetrics
typedef data.TransferStatus        DTransferStatus
typedef data.Cursor                DCursor
typedef data.SpanCursor            DSpanCursor
typedef data.EmailType             DEmailType
typedef data.Transaction           DTransaction
typedef data.TransactionItem       DTransactionItem
typedef data.CandleData            DCandleData
typedef data.ChartTimeDimension    DChartTimeDimension
typedef data.QueryMarketSide       DQueryMarketSide
typedef data.ExportedEventType     DExportedEventType
typedef data.HistoryAsset          DHistoryAsset
typedef data.CurrentAsset          DCurrentAsset
typedef data.HistoryPrice          DHistoryPrice
typedef data.CurrentPrice          DCurrentPrice
typedef data.TransferType          DTransferType

///////////////////////////////////////////////////////////////////////
// 'C' stands for external command,
// 'P' stands for persistent event derived from a external command,
// 'Q' for query,
// 'I' stands for inter-processor commands
// 'R+' stands for response to sender on command success,
// 'R-' stands for response to sender on command failure,
// 'R' stands for response to sender regardless of failure or success.

// WARNING: please avoid using map in event definitation, if you do, please
// make sure all map keys are either i64, i32, double, float, or string;
// do not use enum, struct as map keys so our serialization can still work.

////////// General
/* R-   */ struct MessageNotSupported                 {1: string event}

////////// Admin
/* R    */ struct AdminCommandResult                  {1: DErrorCode error = data.ErrorCode.OK}
/* C,P  */ struct TakeSnapshotNow                     {1: string desc, 2: optional i32 nextSnapshotinSeconds}
/* C    */ struct DumpStateToFile                     {1: string actorPath}

// TODO(d@): All token/password/code should be generated by frontend and use DoUpdateDUserProfile to let bakend update profile.
////////// UserProcessor
/* C,P  */ struct DoRegisterUser                      {1: DUserProfile userProfile, 2: string password}
/* R-   */ struct RegisterUserFailed                  {1: DErrorCode error}
/* R+   */ struct RegisterUserSucceeded               {1: DUserProfile userProfile}

/* C,P  */ struct VerifyEmail                         {1: string token}
/* R-   */ struct VerifyEmailFailed                   {1: DErrorCode error}
/* R+   */ struct VerifyEmailSucceeded                {1: i64 id, 2: string email}

/* C,P  */ struct DoUpdateUserProfile                 {1: DUserProfile userProfile}
/* R-   */ struct UpdateUserProfileFailed             {1: DErrorCode error}
/* R+   */ struct UpdateUserProfileSucceeded          {1: DUserProfile userProfile /* previous profile */}

/* C,P  */ struct DoRequestPasswordReset              {1: string email, 2: optional string passwordResetToken /* ignored */}
/* R-   */ struct RequestPasswordResetFailed          {1: DErrorCode error}
/* R+   */ struct RequestPasswordResetSucceeded       {1: i64 id, 2: string email}

/* Q    */ struct ValidatePasswordResetToken          {1: string passwordResetToken}
/* R    */ struct PasswordResetTokenValidationResult  {1: optional DUserProfile userProfile}

/* C,P  */ struct DoResetPassword                     {1: string newPassword, 2: string passwordResetToken}
/* R-   */ struct ResetPasswordFailed                 {1: DErrorCode error}
/* R+   */ struct ResetPasswordSucceeded              {1: i64 id, 2: string email}

/* C    */ struct Login                               {1: string email, 2: string password} // TODO: this may also be a persistent command
/* R-   */ struct LoginFailed                         {1: DErrorCode error}
/* R+   */ struct LoginSucceeded                      {1: i64 id, 2: string email}

/* Q    */ struct VerifyGoogleAuthCode                {1: string email, 2: i32 code}
/* R    */ struct GoogleAuthCodeVerificationResult    {1: optional DUserProfile userProfile}

/* C,P  */ struct DoRequestTransfer                   {1: DAccountTransfer transfer}
/* R-   */ struct RequestTransferFailed               {1: DErrorCode error}
/* R+   */ struct RequestTransferSucceeded            {1: DAccountTransfer transfer}

/* C,P  */ struct AdminConfirmTransferFailure         {1: DAccountTransfer transfer, 2:DErrorCode error}
/* C,P  */ struct AdminConfirmTransferSuccess         {1: DAccountTransfer transfer}

/* R-   */ struct AddRobotDNAFailed                   {1: DErrorCode error, 2: i64 dnaId}
/* R+   */ struct AddRobotDNASucceeded                {1: i64 dnaId}

/* R-   */ struct RemoveRobotDNAFailed                {1: DErrorCode error, 2: string robotIds}
/* R+   */ struct RemoveRobotDNASucceeded             {1: i64 dnaId}

/* C,P  */ struct DoSubmitOrder                       {1: DMarketSide side, 2: DOrder order}
/* R-   */ struct SubmitOrderFailed                   {1: DMarketSide side, 2: DOrder order, 3: DErrorCode error}
/* I    */ struct OrderFundFrozen                     {1: DMarketSide side, 2: DOrder order}

////////// ApiAuthProcessor
/* C,P  */ struct DoAddNewApiSecret                   {1: i64 userId}
/* C,P  */ struct DoDeleteApiSecret                   {1: DApiSecret secret}
/* R    */ struct ApiSecretOperationResult            {1: DErrorCode error, 2: list<DApiSecret> secrets}

/* Q    */ struct QueryApiSecrets                     {1: i64 userId, 2: optional string identifier}
/* R    */ struct QueryApiSecretsResult               {1: i64 userId, 2: list<DApiSecret> secrets}


////////// MarketProcessor
/* C,P  */ struct DoCancelOrder                       {1: DMarketSide side, 2: i64 id, 3: i64 userId}
/* R-   */ struct CancelOrderFailed                   {1: DErrorCode error}

/* I,R+ */ struct OrderSubmitted                      {1: DOrderInfo originOrderInfo, 2: list<DTransaction> txs}
/* I,R+ */ struct OrderCancelled                      {1: DMarketSide side, 2: DOrder order}

////////// RobotProcessor commands
/* C,P  */ struct DoUpdateMetrics                     {1: DMetrics metrics}
/* C,P  */ struct DoAddRobotDNA                       {1: map<string, string> states}
/* C,P  */ struct DoRemoveRobotDNA                    {1: i64 dnaId}

////////// Mailer
/* C    */ struct DoSendEmail                         {1: string email, 2: DEmailType emailType, 3: map<string, string> params}

////////// Bitway
/* C    */ struct GenerateWallet                      {1: i32 test}

////////////////////////////////////////////////////////////////
//////////////////////// VIEW MESSAGES /////////////////////////
////////////////////////////////////////////////////////////////

////////// AccountView
/* Q    */ struct QueryAccount                        {1: i64 userId}
/* R    */ struct QueryAccountResult                  {1: DUserAccount userAccount}

////////// MarketDepthView
/* Q    */ struct QueryMarketDepth                    {1: DMarketSide side, 2: i32 maxDepth}
/* R    */ struct QueryMarketDepthResult              {1: DMarketDepth marketDepth}

////////// CandleDataView
/* Q    */ struct QueryCandleData                     {1: DMarketSide side, 2: DChartTimeDimension dimension, 3: i64 from, 4: i64 to}
/* R    */ struct QueryCandleDataResult               {1: DCandleData candleData}

////////// OrderView
/* Q    */ struct QueryOrder                          {1: optional i64 uid, 2: optional i64 oid, 3:optional i32 status, 4:optional DQueryMarketSide side, 5: DCursor cursor, 6: bool getCount}
/* R    */ struct QueryOrderResult                    {1: list<DOrderInfo> orderinfos, 2: i64 count}

////////// TransactionView
/* Q    */ struct QueryTransaction                    {1: optional i64 tid, 2: optional i64 uid, 3: optional i64 oid, 4:optional DQueryMarketSide side, 5: DCursor cursor, 6: bool getCount}
/* R    */ struct QueryTransactionResult              {1: list<DTransactionItem> transactionItems, 2: i64 count}

////////// which view?
/* Q    */ struct QueryTransfer                       {1: optional i64 uid, 2: optional DCurrency currency, 3: optional DTransferStatus status, 4: optional DSpanCursor spanCur, 5:optional DTransferType type, 6: DCursor cur, 7: bool getCount}
/* R    */ struct QueryTransferResult                 {1: list<DAccountTransfer> transfers, 2: i64 count}

////////// which view?
/* Q    */ struct QueryAsset                          {1: i64 uid, 2: i64 from, 3: i64 to}
/* R    */ struct QueryAssetResult                    {1: DCurrentAsset currentAsset, 2: DHistoryAsset historyAsset, 3: DCurrentPrice currentPrice, 4: DHistoryPrice historyPrice}


////////// EventExportToMongoView
/* Q    */ struct QueryExportToMongoState             {1: DExportedEventType eventType}
/* R              TExportToMongoState */
