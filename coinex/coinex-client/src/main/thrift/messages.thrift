/**
 * Copyright (C) 2014 Coinport Inc. <http://www.coinport.com>
 *
 * All classes here are case-classes or case-objects. This is required since we are
 * maintaining an in-memory state that's immutable, so that while snapshot is taken,
 * the in-memory state can still be updated.
 */

// WARNING: all structs must have at least 1 parameters, otherwise serialization fails.

namespace java com.coinport.coinex.data

//---------------------------------------------------------------------
// Data and Structs
enum Currency {
    UNKNOWN = 0
    RMB = 1
    USD = 2
    BTC = 1000
}

enum OrderStatus {
    PENDING = 0
    PARTIALLY_EXECUTED = 1
    FULLY_EXECUTED = 2
    CANCELLED = 3
}

enum AccountOperationCode {
    OK = 0
    INSUFFICIENT_FUND = 1
    INVALID_AMOUNT = 2
}

enum OrderSubmissionFailReason {
    PRICE_OUT_OF_RANGE = 1
}

struct MarketSide {
    1: Currency outCurrency
    2: Currency inCurrency
}

struct Order {
    1: i64 userId
    2: i64 id
    3: i64 quantity
    4: optional double price
    5: optional i64 takeLimit
    6: optional i64 timestamp
}

struct OrderInfo {
    1: MarketSide side
    2: Order order
    3: i64 outAmount
    4: i64 inAmount
    5: OrderStatus status
    6: optional i64 lastTxTimestamp
}

struct OrderUpdate {
    1: Order previous
    2: Order current
}

struct Transaction{
    1: i64 timestamp
    2: OrderUpdate takerUpdate
    3: OrderUpdate makerUpdate
}
struct CashAccount{
    1: Currency currency
    2: i64 available
    3: i64 locked
    4: i64 pendingWithdrawal
}

struct UserAccount {
    1: i64 userId
    2: map<Currency, CashAccount> cashAccounts
}

struct PersistentAccountState {
	1: i64 lastOrderId
	2: map<i64, UserAccount> userAccountsMap
}

struct UserLogsState {
    1: map<i64, list<OrderInfo>> orderInfoMap
}

struct MarketDepthItem {
    1: double price
    2: i64 quantity
}


struct MarketDepth {
    1: MarketSide side
    2: list<MarketDepthItem> asks
    3: list<MarketDepthItem> bids
}

struct CandleDataItem {
    1: i64 timestamp
    2: i64 volumn
    3: double open
    4: double close
    5: double low
    6: double high
}

struct CandleData {
    1: i64 timestamp
    2: list<CandleDataItem> items
}

struct CandleDataBundle {
    1: optional CandleData minutelyData
    2: optional CandleData quarterlyData
    3: optional CandleData hourlyData
    4: optional CandleData dailyData
}

struct CandleDataState {
    1: map<MarketSide , CandleDataBundle> bundles
}

// ------------------------------------------------------------------------------------------------
// Non-persistent message.

struct AccountOperationResult{1: AccountOperationCode code, 2: CashAccount cashAccount}
struct OrderSubmissionDone{1: MarketSide side, 2: Order order, 3: list<Transaction> txs}

struct QueryUserOrders{1: i64 userId, 2: optional i32 numOrders, 3: optional i32 skipOrders, 4: optional OrderStatus status}
struct QueryUserOrdersResult{1: i64 userId, 2: list<OrderInfo> orders}

struct QueryAccount{1: i64 userId}
struct QueryAccountResult{1: UserAccount userAccount}

struct QueryMarket{1: MarketSide side, 2: i32 maxDepth}
struct QueryMarketResult{1: MarketDepth marketDepth}
struct QueryMarketUnsupportedMarketFailure{1: MarketSide side}

struct QueryMarketCandleData{1: MarketSide side}
struct QueryMarketCandleDataResult{1: CandleData candleData}

struct OrderSubmissionInProgross{1: MarketSide side, 2: Order order}
// ----------------------------------------------------------------------------
// Persistent Commands - all commands are sent by outside world.
// Please name all commands starting with "Do"

// AccountProcessor commands
struct DoSubmitOrder{1: MarketSide side, 2: Order order}
struct DoDepositCash{1: i64 userId, 2: Currency currency, 3: i64 amount}
struct DoRequestCashWithdrawal{1: i64 userId, 2: Currency currency, 3: i64 amount}
struct DoConfirmCashWithdrawalSuccess{1: i64 userId, 2: Currency currency, 3: i64 amount}
struct DoConfirmCashWithdrawalFailed{1: i64 userId, 2: Currency currency, 3: i64 amount}

// MarketProcessor commands
struct DoCancelOrder{1: MarketSide side, 2: i64 id}

// ------------------------------------------------------------------------------------------------
// Persistent Events. All events are generated by a certain processor and handeled by another processor.
// For each event, we'll comment it in the form of "origin -> handler".

// AccountProcessor -> MarketProcessor events
struct OrderCashLocked{1: MarketSide side, 2: Order order}

// MarketProcessor -> AccountProcessor/MarketUpdateProcessor events
struct OrderCancelled{1: MarketSide side, 2: Order order}
struct OrderSubmissionFailed{1: MarketSide side, 2: Order order, 3: OrderSubmissionFailReason reason}
struct OrderSubmitted{1: OrderInfo originOrderInfo, 2: list<Transaction> txs}
