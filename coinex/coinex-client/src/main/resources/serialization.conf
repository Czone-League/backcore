# We should automatically generate this file with a script.

akka {
	actor {
		serializers {
			bytes = "akka.serialization.ByteArraySerializer"
			proto = "akka.remote.serialization.ProtobufSerializer"
			akka-containers = "akka.remote.serialization.MessageContainerSerializer"
			daemon-create = "akka.remote.serialization.DaemonMsgCreateSerializer"
			akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
			akka-pubsub = "akka.contrib.pattern.protobuf.DistributedPubSubMessageSerializer"
			akka-persistence-snapshot = "akka.persistence.serialization.SnapshotSerializer"
			akka-persistence-message = "akka.persistence.serialization.MessageSerializer"
			event = "com.coinport.coinex.serializers.EventSerializer"
		}
		serialization-bindings {
			"[B" = bytes
			"akka.event.Logging$LogEvent" = bytes
			"com.google.protobuf.GeneratedMessage" = proto
			"com.google.protobuf.Message" = proto
			"akka.actor.ActorSelectionMessage" = akka-containers
			"akka.remote.DaemonMsgCreate" = daemon-create
			"akka.cluster.ClusterMessage" = akka-cluster
			"akka.contrib.pattern.DistributedPubSubMessage" = akka-pubsub
			"akka.persistence.serialization.Snapshot" = akka-persistence-snapshot
			"akka.persistence.serialization.Message" = akka-persistence-message

			"com.coinport.coinex.data.AccountOperationResult" = event
			"com.coinport.coinex.data.DoCancelOrder" = event
			"com.coinport.coinex.data.DoConfirmCashWithdrawalFailed" = event
			"com.coinport.coinex.data.DoConfirmCashWithdrawalSuccess" = event
			"com.coinport.coinex.data.DoDepositCash" = event
			"com.coinport.coinex.data.DoRequestCashWithdrawal" = event
			"com.coinport.coinex.data.DoSubmitOrder" = event
			"com.coinport.coinex.data.OrderCashLocked" = event
			"com.coinport.coinex.data.QueryAccount" = event
			"com.coinport.coinex.data.QueryAccountResult" = event
			"com.coinport.coinex.data.QueryMarket" = event
			"com.coinport.coinex.data.QueryMarketResult" = event
			"com.coinport.coinex.data.QueryMarketUnsupportedMarketFailure" = event
			"com.coinport.coinex.data.OrderCancelled" = event
			"com.coinport.coinex.data.OrderSubmissionFailed" = event
			"com.coinport.coinex.data.OrderSubmitted" = event
			"com.coinport.coinex.data.QueryUserOrders" = event
			"com.coinport.coinex.data.QueryUserOrdersResult" = event
			"com.coinport.coinex.data.QueryMarketCandleData" = event
			"com.coinport.coinex.data.QueryMarketCandleDataResult" = event
		}	
	}
}
