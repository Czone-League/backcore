
/**
 * Copyright (C) 2014 Coinport Inc. <http://www.coinport.com>
 *
 * This file was auto generated by auto_gen_serializer.sh
 */

package com.coinport.coinex.serializers

import org.json4s.CustomSerializer
import org.json4s._
import org.json4s.ext._
import com.coinport.coinex.data._
import org.json4s.native.Serialization

object MapSerializer extends Serializer[Map[Any, Any]] {
  def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
    case m: Map[_, _] => JObject(m.map({
      case (k, v) => JField(
        k match {
          case ks: String => ks
          case ks: BitwayRequestType => ks.name
          case ks: ChartTimeDimension => ks.name
          case ks: CryptoCurrencyAddressType => ks.name
          case ks: CryptoCurrencyTransactionType => ks.name
          case ks: Currency => ks.name
          case ks: Direction => ks.name
          case ks: EmailType => ks.name
          case ks: ErrorCode => ks.name
          case ks: ExportedEventType => ks.name
          case ks: OrderStatus => ks.name
          case ks: RechargeCodeStatus => ks.name
          case ks: RefundReason => ks.name
          case ks: TransferStatus => ks.name
          case ks: TransferType => ks.name
          case ks: UserStatus => ks.name
          case ks: Any => ks.toString
        },
        Extraction.decompose(v))
    }).toList)
  }

  // TODO(d): https://github.com/json4s/json4s/blob/master/tests/src/test/scala/org/json4s/native/SerializationExamples.scala
  def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), Map[Any, Any]] = {
    sys.error("Not interested.")
  }
}

object ThriftEnumJson4sSerialization {

  class BitwayRequestTypeSerializer extends CustomSerializer[BitwayRequestType](format => (
    { case JString(s) => BitwayRequestType.valueOf(s).get }, {
      case x: BitwayRequestType => JString(x.name)
    }))

  class ChartTimeDimensionSerializer extends CustomSerializer[ChartTimeDimension](format => (
    { case JString(s) => ChartTimeDimension.valueOf(s).get }, {
      case x: ChartTimeDimension => JString(x.name)
    }))

  class CryptoCurrencyAddressTypeSerializer extends CustomSerializer[CryptoCurrencyAddressType](format => (
    { case JString(s) => CryptoCurrencyAddressType.valueOf(s).get }, {
      case x: CryptoCurrencyAddressType => JString(x.name)
    }))

  class CryptoCurrencyTransactionTypeSerializer extends CustomSerializer[CryptoCurrencyTransactionType](format => (
    { case JString(s) => CryptoCurrencyTransactionType.valueOf(s).get }, {
      case x: CryptoCurrencyTransactionType => JString(x.name)
    }))

  class CurrencySerializer extends CustomSerializer[Currency](format => (
    { case JString(s) => Currency.valueOf(s).get }, {
      case x: Currency => JString(x.name)
    }))

  class DirectionSerializer extends CustomSerializer[Direction](format => (
    { case JString(s) => Direction.valueOf(s).get }, {
      case x: Direction => JString(x.name)
    }))

  class EmailTypeSerializer extends CustomSerializer[EmailType](format => (
    { case JString(s) => EmailType.valueOf(s).get }, {
      case x: EmailType => JString(x.name)
    }))

  class ErrorCodeSerializer extends CustomSerializer[ErrorCode](format => (
    { case JString(s) => ErrorCode.valueOf(s).get }, {
      case x: ErrorCode => JString(x.name)
    }))

  class ExportedEventTypeSerializer extends CustomSerializer[ExportedEventType](format => (
    { case JString(s) => ExportedEventType.valueOf(s).get }, {
      case x: ExportedEventType => JString(x.name)
    }))

  class OrderStatusSerializer extends CustomSerializer[OrderStatus](format => (
    { case JString(s) => OrderStatus.valueOf(s).get }, {
      case x: OrderStatus => JString(x.name)
    }))

  class RechargeCodeStatusSerializer extends CustomSerializer[RechargeCodeStatus](format => (
    { case JString(s) => RechargeCodeStatus.valueOf(s).get }, {
      case x: RechargeCodeStatus => JString(x.name)
    }))

  class RefundReasonSerializer extends CustomSerializer[RefundReason](format => (
    { case JString(s) => RefundReason.valueOf(s).get }, {
      case x: RefundReason => JString(x.name)
    }))

  class TransferStatusSerializer extends CustomSerializer[TransferStatus](format => (
    { case JString(s) => TransferStatus.valueOf(s).get }, {
      case x: TransferStatus => JString(x.name)
    }))

  class TransferTypeSerializer extends CustomSerializer[TransferType](format => (
    { case JString(s) => TransferType.valueOf(s).get }, {
      case x: TransferType => JString(x.name)
    }))

  class UserStatusSerializer extends CustomSerializer[UserStatus](format => (
    { case JString(s) => UserStatus.valueOf(s).get }, {
      case x: UserStatus => JString(x.name)
    }))

  implicit val formats = Serialization.formats(NoTypeHints) +
    new BitwayRequestTypeSerializer +
    new ChartTimeDimensionSerializer +
    new CryptoCurrencyAddressTypeSerializer +
    new CryptoCurrencyTransactionTypeSerializer +
    new CurrencySerializer +
    new DirectionSerializer +
    new EmailTypeSerializer +
    new ErrorCodeSerializer +
    new ExportedEventTypeSerializer +
    new OrderStatusSerializer +
    new RechargeCodeStatusSerializer +
    new RefundReasonSerializer +
    new TransferStatusSerializer +
    new TransferTypeSerializer +
    new UserStatusSerializer
}
