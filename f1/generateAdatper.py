#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# TODO(c): move this generate exe to build.gradle and move generated file to gen-java
# Copyright 2014 Coinport Inc. All Rights Reserved.

__author__ = 'c@coinport.com (Ma Chao)'

import os

# enum_types = ['BPCommandType', 'BOS', 'MOL', 'SOM', 'Strategy', 'CoinType',
    # 'DOW', 'CommandStats']
enum_types = ['BOS', 'MOL', 'SOM', 'Strategy', 'CoinType', 'DOW',
    'CommandStats', 'OutputEventType']

template = """
/**
 * Copyright 2014 Coinport Inc. All Rights Reserved.
 * Author: c@coinport.com (Chao Ma)
 *
 * THIS FILE IS GENERATED BY SCRIPT. DO NOT EDIT IT.
 */

package com.coinport.f1.adapter;

import java.lang.reflect.Type;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

import com.coinport.f1.ENUM_TYPE;

public class ENUM_TYPEAdapter implements JsonSerializer<ENUM_TYPE>,
        JsonDeserializer<ENUM_TYPE> {

    @Override
    public JsonElement serialize(ENUM_TYPE state, Type arg1,
            JsonSerializationContext arg2) {
        return new JsonPrimitive(state.ordinal());
    }

    @Override
    public ENUM_TYPE deserialize(JsonElement json, Type typeOfT,
            JsonDeserializationContext context) throws JsonParseException {
        return ENUM_TYPE.findByValue(json.getAsInt());
    }
}
"""

def main():
    pathDir = './src/main/java/com/coinport/f1/adapter/'
    for enum in enum_types:
        filePath = os.path.join(pathDir, enum + 'Adapter.java');
        adapterFile = open(filePath, 'w')
        adapterFile.write(template.replace('ENUM_TYPE', enum))
        adapterFile.close()

if __name__ == '__main__':
    main()
